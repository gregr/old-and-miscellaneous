#! /usr/bin/env python

import sys
sys.path += ['../utils']
from sconsutils import *

import subprocess

llvmDefs = ["_DEBUG", "_GNU_SOURCE",
            "__STDC_LIMIT_MACROS", "__STDC_CONSTANT_MACROS"]

def llvmConfig(args):
    out = subprocess.Popen(("llvm-config "+args).split(),
                           stdout=subprocess.PIPE).stdout
    result = out.read().split()
    objs = [o for o in result if o.endswith(".o")]
    libs = [l[2:] for l in result if l.startswith("-l")]
    return objs, libs

llvmObjs, llvmLibs = llvmConfig("--ldflags --libs core jit native")

# env = Environment(CPPDEFINES=cppdefs, CCFLAGS=ccflags, CPPPATH=cpppath,
#                   LIBS=libs, LIBPATH=libpath)

setDeps(['sir.c', ('../common', 'common')])

makeProg('test_sir_llvm', ['test_sir_llvm.c', 'sir.c', 'sir_llvm_linkcpp.cpp',
                           ('sir_llvm.c', llvmDefs)],
         llvmObjs, llvmLibs)

#ext = env.SharedLibrary("sirc_ext.c")
#env.Program(["test_sir.cpp", "sir.cpp", "sir_llvm.cpp"]
#            + objs)

#libs+=["sirc_ext"] # optional
# env.Program(["sirc.cpp",# "sirc_parse.cpp",
#              "sir.c", "sir_llvm.cpp"]
#             + objs, LIBS=libs, LIBPATH=libpath)
